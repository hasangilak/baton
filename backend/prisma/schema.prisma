// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  avatar    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  ownedProjects Project[]
  assignedTasks Task[]     @relation("TaskAssignee")
  createdTasks  Task[]     @relation("TaskCreator")
  comments      Comment[]

  @@map("users")
}

model Project {
  id          String   @id @default(cuid())
  name        String
  description String?
  color       String   @default("#3b82f6")
  status      String   @default("active") // active, archived, completed
  isStarred   Boolean  @default(false)
  ownerId     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  owner            User               @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  tasks            Task[]
  mcpPlans         MCPPlan[]
  claudeTodos      ClaudeTodo[]
  workspaceMappings WorkspaceMapping[]

  @@map("projects")
}

model Task {
  id           String    @id @default(cuid())
  title        String
  description  String?
  status       String    @default("todo") // todo, in_progress, done
  priority     String    @default("medium") // low, medium, high
  projectId    String
  assigneeId   String?
  createdById  String
  dueDate      DateTime?
  completedAt  DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  order        Int       @default(0)
  labels       String?   // JSON array of strings
  commentCount Int       @default(0)

  // Relations
  project     Project      @relation(fields: [projectId], references: [id], onDelete: Cascade)
  assignee    User?        @relation("TaskAssignee", fields: [assigneeId], references: [id])
  createdBy   User         @relation("TaskCreator", fields: [createdById], references: [id])
  comments    Comment[]
  claudeTodos ClaudeTodo[] @relation("ClaudeTodoSync")

  @@map("tasks")
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  taskId    String
  authorId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  task   Task @relation(fields: [taskId], references: [id], onDelete: Cascade)
  author User @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@map("comments")
}

model MCPAgent {
  id          String    @id @default(cuid())
  name        String    @unique
  description String?
  endpoint    String
  isActive    Boolean   @default(true)
  lastSeen    DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  plans MCPPlan[]

  @@map("mcp_agents")
}

model MCPPlan {
  id          String   @id @default(cuid())
  title       String
  description String?
  agentId     String
  agentName   String
  projectId   String
  status      String   @default("pending") // pending, in_progress, completed, failed
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  agent   MCPAgent  @relation(fields: [agentId], references: [id], onDelete: Cascade)
  project Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  tasks   MCPTask[]

  @@map("mcp_plans")
}

model MCPTask {
  id          String   @id @default(cuid())
  title       String
  description String?
  status      String   @default("todo") // todo, in_progress, done
  priority    String   @default("medium") // low, medium, high
  order       Int      @default(0)
  planId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  plan MCPPlan @relation(fields: [planId], references: [id], onDelete: Cascade)

  @@map("mcp_tasks")
}

model ClaudeTodo {
  id           String    @id
  content      String
  status       String    // pending, in_progress, completed
  priority     String    // high, medium, low
  projectId    String    @map("project_id")
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt @map("updated_at")
  metadata     Json?
  syncedTaskId String?   @map("synced_task_id")
  orderIndex   Int       @default(0) @map("order_index")
  createdBy    String    @default("claude") @map("created_by") // claude, human, system

  // Relations
  project    Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  syncedTask Task?   @relation("ClaudeTodoSync", fields: [syncedTaskId], references: [id], onDelete: SetNull)

  @@map("claude_todos")
  @@index([projectId])
  @@index([status])
  @@index([priority])
  @@index([orderIndex])
}

model WorkspaceMapping {
  id            String   @id @default(cuid())
  workspacePath String   @unique
  projectId     String
  lastAccessed  DateTime @default(now())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("workspace_mappings")
}