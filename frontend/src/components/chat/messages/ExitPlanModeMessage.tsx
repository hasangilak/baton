/**
 * ExitPlanMode Message Component
 * 
 * Specialized component for rendering ExitPlanMode tool messages with:
 * - Always-expanded plan content with professional markdown formatting
 * - Syntax highlighting for code blocks
 * - Clean display focused on plan content
 * - Seamless integration with chat flow
 */

import React from 'react';
import {
  FileText,
  EyeIcon,
  Timer
} from 'lucide-react';
import ReactMarkdown from 'react-markdown';
import remarkGfm from 'remark-gfm';
import { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';
import { vscDarkPlus } from 'react-syntax-highlighter/dist/esm/styles/prism';
import type { StreamingToolMessage as ToolMessageType } from '../../../types';

interface ExitPlanModeMessageProps {
  message: ToolMessageType & { metadata?: any };
  isStreaming?: boolean;
  onCopy?: (content: string, messageId: string) => void;
  onRetry?: (messageId: string) => void;
  showTimestamp?: boolean;
  compact?: boolean;
}

const ExitPlanModeMessage: React.FC<ExitPlanModeMessageProps> = ({
  message,
  showTimestamp = true,
}) => {
  // Extract plan content from message
  const planContent = message.metadata?.toolInput?.plan || message.input?.plan || 'No plan content available';
  const title = "Implementation Plan";
  const description = "Implementation plan generated by Claude Code";

  // Custom components for ReactMarkdown with dark theme styling
  const markdownComponents = {
    // Headings with proper hierarchy and colors
    h1: ({ children }: any) => (
      <h1 className="text-lg font-bold mt-4 mb-2 text-blue-300 border-b border-blue-800 pb-1">{children}</h1>
    ),
    h2: ({ children }: any) => (
      <h2 className="text-base font-semibold mt-3 mb-2 text-blue-400">{children}</h2>
    ),
    h3: ({ children }: any) => (
      <h3 className="text-sm font-semibold mt-3 mb-1 text-gray-200">{children}</h3>
    ),
    h4: ({ children }: any) => (
      <h4 className="text-sm font-medium mt-2 mb-1 text-gray-300">{children}</h4>
    ),
    h5: ({ children }: any) => (
      <h5 className="text-xs font-medium mt-1 mb-1 text-gray-400">{children}</h5>
    ),
    h6: ({ children }: any) => (
      <h6 className="text-xs font-medium mt-1 mb-1 text-gray-500">{children}</h6>
    ),
    
    // Paragraphs
    p: ({ children }: any) => (
      <p className="text-xs text-gray-300 leading-relaxed mb-2">{children}</p>
    ),
    
    // Lists
    ul: ({ children }: any) => (
      <ul className="text-xs text-gray-300 ml-4 mb-2 list-disc space-y-1">{children}</ul>
    ),
    ol: ({ children }: any) => (
      <ol className="text-xs text-gray-300 ml-4 mb-2 list-decimal space-y-1">{children}</ol>
    ),
    li: ({ children }: any) => (
      <li className="text-xs text-gray-300">{children}</li>
    ),
    
    // Code blocks with syntax highlighting
    code: ({ inline, className, children, ...props }: any) => {
      const match = /language-(\w+)/.exec(className || '');
      return !inline && match ? (
        <SyntaxHighlighter
          style={vscDarkPlus}
          language={match[1]}
          PreTag="div"
          className="rounded text-xs my-2"
          {...props}
        >
          {String(children).replace(/\n$/, '')}
        </SyntaxHighlighter>
      ) : (
        <code className="bg-gray-800 text-blue-300 px-1 py-0.5 rounded text-xs font-mono" {...props}>
          {children}
        </code>
      );
    },
    
    // Blockquotes
    blockquote: ({ children }: any) => (
      <blockquote className="border-l-2 border-blue-500 pl-3 ml-2 text-xs text-gray-400 italic my-2">
        {children}
      </blockquote>
    ),
    
    // Strong/bold text
    strong: ({ children }: any) => (
      <strong className="font-semibold text-gray-200">{children}</strong>
    ),
    
    // Emphasis/italic text
    em: ({ children }: any) => (
      <em className="italic text-gray-300">{children}</em>
    ),
    
    // Horizontal rule
    hr: () => (
      <hr className="border-gray-700 my-3" />
    ),
    
    // Links
    a: ({ children, href }: any) => (
      <a href={href} className="text-blue-400 hover:text-blue-300 underline text-xs" target="_blank" rel="noopener noreferrer">
        {children}
      </a>
    ),
  };

  const planLines = planContent.split('\n').length;

  return (
    <div
      className="group relative my-2 rounded-md border border-blue-800 bg-[#111315] text-gray-200 transition-colors"
      data-testid="exit-plan-mode-container"
    >
      {/* Left accent bar - blue for plan review */}
      <div className="absolute left-0 top-0 h-full w-0.5 rounded-l-md bg-blue-500/40" />
      
      {/* Header */}
      <div className="flex items-center gap-2 px-3 pt-2 pb-1">
        <EyeIcon size={14} className="shrink-0 text-blue-400" />
        <span className="text-[11px] font-medium tracking-wide uppercase text-gray-300">
          {title}
        </span>
        <span className="text-[10px] px-1.5 py-0.5 rounded-sm flex items-center gap-1 font-medium bg-blue-500/20 text-blue-400">
          <FileText size={11} />PLAN
        </span>
        <span className="text-[11px] font-mono text-gray-400 truncate max-w-[120px]">{planLines} lines</span>
        <span className="flex-1 truncate text-[11px] text-gray-500 hidden sm:inline">{description}</span>
        {showTimestamp && (
          <span className="text-[10px] text-gray-500 flex items-center gap-1">
            <Timer size={12} />{new Date().toLocaleTimeString()}
          </span>
        )}
      </div>

      {/* Always-expanded plan content */}
      <div className="px-3 pb-3 border-t border-gray-800">
        <div className="py-2">
          {/* Plan content - always visible with ReactMarkdown */}
          <div className="border border-gray-800/70 rounded p-3 bg-black/30 max-h-96 overflow-auto">
            <ReactMarkdown
              remarkPlugins={[remarkGfm]}
              components={markdownComponents}
              className="prose prose-sm max-w-none"
            >
              {planContent}
            </ReactMarkdown>
          </div>
        </div>
      </div>
    </div>
  );
};

export default ExitPlanModeMessage;