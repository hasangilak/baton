/**
 * ExitPlanMode Message Component
 * 
 * Specialized component for rendering ExitPlanMode tool messages with:
 * - Always-expanded plan content with professional markdown formatting
 * - Syntax highlighting for code blocks
 * - Clean display focused on plan content
 * - Seamless integration with chat flow
 */

import React, { useState } from 'react';
import {
  FileText,
  EyeIcon,
  Timer,
  Check,
  X,
  Edit,
  Zap,
  Loader2
} from 'lucide-react';
import ReactMarkdown from 'react-markdown';
import remarkGfm from 'remark-gfm';
import { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';
import { vscDarkPlus } from 'react-syntax-highlighter/dist/esm/styles/prism';
import type { StreamingToolMessage as ToolMessageType } from '../../../types';

interface ExitPlanModeMessageProps {
  message: ToolMessageType & { metadata?: any };
  isStreaming?: boolean;
  onCopy?: (content: string, messageId: string) => void;
  onRetry?: (messageId: string) => void;
  showTimestamp?: boolean;
  compact?: boolean;
  onPlanDecision?: (decision: 'auto_accept' | 'review_accept' | 'edit_plan' | 'reject') => void;
}

const ExitPlanModeMessage: React.FC<ExitPlanModeMessageProps> = ({
  message,
  showTimestamp = true,
  onPlanDecision,
}) => {
  const [selectedDecision, setSelectedDecision] = useState<string | null>(null);
  const [isResponding, setIsResponding] = useState(false);

  // Handle plan decision
  const handleDecision = async (decision: 'auto_accept' | 'review_accept' | 'edit_plan' | 'reject') => {
    if (isResponding || selectedDecision !== null || !onPlanDecision) return;
    
    setSelectedDecision(decision);
    setIsResponding(true);
    
    try {
      await onPlanDecision(decision);
    } catch (error) {
      console.error('Error processing plan decision:', error);
      // Reset state on error
      setSelectedDecision(null);
    } finally {
      setIsResponding(false);
    }
  };

  // Extract plan content from message
  const planContent = message.metadata?.toolInput?.plan || message.input?.plan || 'No plan content available';
  const title = "Implementation Plan";
  const description = "Implementation plan generated by Claude Code";

  // Custom components for ReactMarkdown with dark theme styling
  const markdownComponents = {
    // Headings with proper hierarchy and colors
    h1: (props: React.HTMLAttributes<HTMLHeadingElement>) => {
      const { children, ...rest } = props;
      return (
        <h1 className="text-lg font-bold mt-4 mb-2 text-blue-300 border-b border-blue-800 pb-1" {...rest}>
          {children}
        </h1>
      );
    },
    h2: (props: React.HTMLAttributes<HTMLHeadingElement>) => {
      const { children, ...rest } = props;
      return (
        <h2 className="text-base font-semibold mt-3 mb-2 text-blue-400" {...rest}>
          {children}
        </h2>
      );
    },
    h3: (props: React.HTMLAttributes<HTMLHeadingElement>) => {
      const { children, ...rest } = props;
      return (
        <h3 className="text-sm font-semibold mt-3 mb-1 text-gray-200" {...rest}>
          {children}
        </h3>
      );
    },
    h4: (props: React.HTMLAttributes<HTMLHeadingElement>) => {
      const { children, ...rest } = props;
      return (
        <h4 className="text-sm font-medium mt-2 mb-1 text-gray-300" {...rest}>
          {children}
        </h4>
      );
    },
    h5: (props: React.HTMLAttributes<HTMLHeadingElement>) => {
      const { children, ...rest } = props;
      return (
        <h5 className="text-xs font-medium mt-1 mb-1 text-gray-400" {...rest}>
          {children}
        </h5>
      );
    },
    h6: (props: React.HTMLAttributes<HTMLHeadingElement>) => {
      const { children, ...rest } = props;
      return (
        <h6 className="text-xs font-medium mt-1 mb-1 text-gray-500" {...rest}>
          {children}
        </h6>
      );
    },
    
    // Paragraphs
    p: (props: React.HTMLAttributes<HTMLParagraphElement>) => {
      const { children, ...rest } = props;
      return (
        <p className="text-xs text-gray-300 leading-relaxed mb-2" {...rest}>
          {children}
        </p>
      );
    },
    
    // Lists
    ul: (props: React.HTMLAttributes<HTMLUListElement>) => {
      const { children, ...rest } = props;
      return (
        <ul className="text-xs text-gray-300 ml-4 mb-2 list-disc space-y-1" {...rest}>
          {children}
        </ul>
      );
    },
    ol: (props: React.HTMLAttributes<HTMLOListElement>) => {
      const { children, ...rest } = props;
      return (
        <ol className="text-xs text-gray-300 ml-4 mb-2 list-decimal space-y-1" {...rest}>
          {children}
        </ol>
      );
    },
    li: (props: React.HTMLAttributes<HTMLLIElement>) => {
      const { children, ...rest } = props;
      return (
        <li className="text-xs text-gray-300" {...rest}>
          {children}
        </li>
      );
    },
    
    // Code blocks with syntax highlighting
    code: (props: React.HTMLAttributes<HTMLElement> & { inline?: boolean }) => {
      const { inline, className, children, ...rest } = props;
      const match = /language-(\w+)/.exec(className || '');
      return !inline && match ? (
        <SyntaxHighlighter
          style={vscDarkPlus}
          language={match[1]}
          PreTag="div"
          className="rounded text-xs my-2"
        >
          {String(children).replace(/\n$/, '')}
        </SyntaxHighlighter>
      ) : (
        <code className="bg-gray-800 text-blue-300 px-1 py-0.5 rounded text-xs font-mono" {...rest}>
          {children}
        </code>
      );
    },
    
    // Blockquotes
    blockquote: (props: React.HTMLAttributes<HTMLQuoteElement>) => {
      const { children, ...rest } = props;
      return (
        <blockquote className="border-l-2 border-blue-500 pl-3 ml-2 text-xs text-gray-400 italic my-2" {...rest}>
          {children}
        </blockquote>
      );
    },
    
    // Strong/bold text
    strong: (props: React.HTMLAttributes<HTMLElement>) => {
      const { children, ...rest } = props;
      return (
        <strong className="font-semibold text-gray-200" {...rest}>
          {children}
        </strong>
      );
    },
    
    // Emphasis/italic text
    em: (props: React.HTMLAttributes<HTMLElement>) => {
      const { children, ...rest } = props;
      return (
        <em className="italic text-gray-300" {...rest}>
          {children}
        </em>
      );
    },
    
    // Horizontal rule
    hr: (props: React.HTMLAttributes<HTMLHRElement>) => {
      const { ...rest } = props;
      return <hr className="border-gray-700 my-3" {...rest} />;
    },
    
    // Links
    a: (props: React.AnchorHTMLAttributes<HTMLAnchorElement>) => {
      const { children, href, ...rest } = props;
      return (
        <a 
          href={href} 
          className="text-blue-400 hover:text-blue-300 underline text-xs" 
          target="_blank" 
          rel="noopener noreferrer"
          {...rest}
        >
          {children}
        </a>
      );
    },
  };

  const planLines = planContent.split('\n').length;

  return (
    <div
      className="group relative my-2 rounded-md border border-blue-800 bg-[#111315] text-gray-200 transition-colors"
      data-testid="exit-plan-mode-container"
    >
      {/* Left accent bar - blue for plan review */}
      <div className="absolute left-0 top-0 h-full w-0.5 rounded-l-md bg-blue-500/40" />
      
      {/* Header */}
      <div className="flex items-center gap-2 px-3 pt-2 pb-1">
        <EyeIcon size={14} className="shrink-0 text-blue-400" />
        <span className="text-[11px] font-medium tracking-wide uppercase text-gray-300">
          {title}
        </span>
        <span className="text-[10px] px-1.5 py-0.5 rounded-sm flex items-center gap-1 font-medium bg-blue-500/20 text-blue-400">
          <FileText size={11} />PLAN
        </span>
        <span className="text-[11px] font-mono text-gray-400 truncate max-w-[120px]">{planLines} lines</span>
        <span className="flex-1 truncate text-[11px] text-gray-500 hidden sm:inline">{description}</span>
        {showTimestamp && (
          <span className="text-[10px] text-gray-500 flex items-center gap-1">
            <Timer size={12} />{new Date().toLocaleTimeString()}
          </span>
        )}
      </div>

      {/* Always-expanded plan content */}
      <div className="px-3 pb-3 border-t border-gray-800">
        <div className="py-2">
          {/* Plan content - always visible with ReactMarkdown */}
          <div className="border border-gray-800/70 rounded p-3 bg-black/30 max-h-96 overflow-auto">
            <ReactMarkdown
              remarkPlugins={[remarkGfm]}
              components={markdownComponents}
            >
              {planContent}
            </ReactMarkdown>
          </div>
        </div>

        {/* Plan approval actions */}
        {onPlanDecision && (
          <div className="pt-3 border-t border-gray-800/50 mt-2">
            <div className="text-xs text-gray-400 mb-3">
              Review the implementation plan above and choose your preferred action:
            </div>
            <div className="flex flex-wrap gap-2">
              {/* Auto Accept */}
              <button
                onClick={() => handleDecision('auto_accept')}
                disabled={isResponding || selectedDecision !== null}
                className="relative select-none rounded-sm border px-3 h-8 text-sm font-medium flex items-center gap-2 focus:outline-none focus:ring-1 focus:ring-blue-500 transition-colors disabled:opacity-60 disabled:cursor-not-allowed hover:bg-green-500/10 text-green-300 border-green-800 bg-green-900/30"
              >
                {selectedDecision === 'auto_accept' && isResponding ? (
                  <Loader2 className="w-4 h-4 animate-spin text-green-500" />
                ) : (
                  <Zap className="w-4 h-4" />
                )}
                <span>Auto Accept & Start</span>
                {selectedDecision === 'auto_accept' && !isResponding && (
                  <Check className="w-4 h-4 text-green-500" />
                )}
              </button>

              {/* Review Accept */}
              <button
                onClick={() => handleDecision('review_accept')}
                disabled={isResponding || selectedDecision !== null}
                className="relative select-none rounded-sm border px-3 h-8 text-sm font-medium flex items-center gap-2 focus:outline-none focus:ring-1 focus:ring-blue-500 transition-colors disabled:opacity-60 disabled:cursor-not-allowed hover:bg-blue-500/10 text-blue-300 border-blue-800 bg-blue-900/30"
              >
                {selectedDecision === 'review_accept' && isResponding ? (
                  <Loader2 className="w-4 h-4 animate-spin text-blue-500" />
                ) : (
                  <Check className="w-4 h-4" />
                )}
                <span>Approve Plan</span>
                {selectedDecision === 'review_accept' && !isResponding && (
                  <Check className="w-4 h-4 text-blue-500" />
                )}
              </button>

              {/* Edit Plan */}
              <button
                onClick={() => handleDecision('edit_plan')}
                disabled={isResponding || selectedDecision !== null}
                className="relative select-none rounded-sm border px-3 h-8 text-sm font-medium flex items-center gap-2 focus:outline-none focus:ring-1 focus:ring-blue-500 transition-colors disabled:opacity-60 disabled:cursor-not-allowed hover:bg-amber-500/10 text-amber-300 border-amber-800 bg-amber-900/30"
              >
                {selectedDecision === 'edit_plan' && isResponding ? (
                  <Loader2 className="w-4 h-4 animate-spin text-amber-500" />
                ) : (
                  <Edit className="w-4 h-4" />
                )}
                <span>Edit Plan</span>
                {selectedDecision === 'edit_plan' && !isResponding && (
                  <Check className="w-4 h-4 text-amber-500" />
                )}
              </button>

              {/* Reject */}
              <button
                onClick={() => handleDecision('reject')}
                disabled={isResponding || selectedDecision !== null}
                className="relative select-none rounded-sm border px-3 h-8 text-sm font-medium flex items-center gap-2 focus:outline-none focus:ring-1 focus:ring-blue-500 transition-colors disabled:opacity-60 disabled:cursor-not-allowed hover:bg-red-500/10 text-red-300 border-red-800 bg-red-900/30"
              >
                {selectedDecision === 'reject' && isResponding ? (
                  <Loader2 className="w-4 h-4 animate-spin text-red-500" />
                ) : (
                  <X className="w-4 h-4" />
                )}
                <span>Reject</span>
                {selectedDecision === 'reject' && !isResponding && (
                  <Check className="w-4 h-4 text-red-500" />
                )}
              </button>
            </div>

            {/* Status info */}
            <div className="flex items-center gap-4 text-xs text-gray-500 mt-3">
              <div className="flex items-center gap-1">
                <Timer size={12} />
                <span>30s timeout</span>
              </div>
              {selectedDecision ? (
                <div className="flex items-center gap-1">
                  {isResponding ? (
                    <>
                      <Loader2 className="w-3 h-3 animate-spin" />
                      <span className="text-gray-400">Processing decision...</span>
                    </>
                  ) : (
                    <>
                      <Check className="w-3 h-3 text-green-500" />
                      <span className="text-gray-400">Decision sent</span>
                    </>
                  )}
                </div>
              ) : (
                <div className="flex items-center gap-1 text-gray-500">
                  <span>Awaiting your decision</span>
                </div>
              )}
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default ExitPlanModeMessage;