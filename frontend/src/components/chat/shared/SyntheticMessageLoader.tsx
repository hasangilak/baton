/**
 * Synthetic Message Loader Component
 * 
 * Displays a specialized loader effect for synthetic status messages
 * generated by the bridge service when Claude uses tools.
 */

import React from 'react';
import { Loader2, Bot, Sparkles } from 'lucide-react';
import { formatDistanceToNow } from 'date-fns';

interface SyntheticMessageLoaderProps {
  content: string;
  toolName?: string;
  timestamp?: number;
  isVisible?: boolean;
  variant?: 'overlay' | 'inline' | 'compact';
  showToolIcon?: boolean;
}

const getToolIcon = (toolName: string) => {
  const name = toolName?.toLowerCase() || '';
  
  if (name.includes('websearch') || name.includes('search')) return '🔍';
  if (name.includes('bash') || name.includes('terminal')) return '⚡';
  if (name.includes('read') || name.includes('file')) return '📄';
  if (name.includes('write') || name.includes('edit')) return '✏️';
  if (name.includes('grep') || name.includes('find')) return '🔎';
  if (name.includes('webfetch')) return '🌐';
  if (name.includes('glob')) return '📁';
  
  return '🔧';
};

export const SyntheticMessageLoader: React.FC<SyntheticMessageLoaderProps> = ({
  content,
  toolName,
  timestamp,
  isVisible = true,
  variant = 'inline',
  showToolIcon = true,
}) => {
  if (!isVisible || !content) return null;

  const toolIcon = showToolIcon && toolName ? getToolIcon(toolName) : null;

  // Overlay variant (floating status)
  if (variant === 'overlay') {
    return (
      <div className="fixed bottom-28 left-1/2 -translate-x-1/2 z-50 animate-fade-in">
        <div className="bg-synthetic-gradient backdrop-blur-sm border border-orange-500/30 
                        rounded-full px-4 py-2 shadow-xl max-w-md animate-synthetic-glow">
          <div className="flex items-center gap-3">
            {/* Animated loading dots */}
            <div className="flex gap-1">
              <span className="w-2 h-2 bg-white/90 rounded-full animate-dot-bounce" />
              <span className="w-2 h-2 bg-white/90 rounded-full animate-dot-bounce animation-delay-200" />
              <span className="w-2 h-2 bg-white/90 rounded-full animate-dot-bounce animation-delay-400" />
            </div>
            
            {/* Tool icon */}
            {toolIcon && (
              <span className="text-lg animate-pulse-soft">{toolIcon}</span>
            )}
            
            {/* Status message */}
            <span className="text-sm text-white font-medium truncate">
              {content}
            </span>
            
            {/* Optional timestamp */}
            {timestamp && (
              <span className="text-xs text-white/70">
                {formatDistanceToNow(timestamp, { addSuffix: true })}
              </span>
            )}
          </div>
        </div>
      </div>
    );
  }

  // Compact variant (minimal inline)
  if (variant === 'compact') {
    return (
      <div className="flex items-center gap-2 px-3 py-1.5 bg-synthetic-gradient
                      border-l-2 border-orange-500/60 rounded-sm animate-synthetic-slide">
        <Loader2 size={12} className="text-white animate-spin" />
        {toolIcon && <span className="text-sm animate-pulse-soft">{toolIcon}</span>}
        <span className="text-xs text-white font-medium truncate">
          {content}
        </span>
      </div>
    );
  }

  // Inline variant (default)
  return (
    <div className="flex gap-3 p-3 bg-gradient-to-r from-orange-900/20 to-blue-900/20 
                    border border-orange-500/20 rounded-lg animate-synthetic-slide">
      {/* Bot avatar with spinning loader */}
      <div className="relative w-8 h-8 rounded-lg bg-synthetic-gradient 
                      flex items-center justify-center flex-shrink-0 animate-synthetic-glow">
        <Bot size={16} className="text-white" />
        <div className="absolute -top-1 -right-1">
          <Loader2 size={12} className="text-white animate-spin" />
        </div>
      </div>

      {/* Content */}
      <div className="flex-1 min-w-0">
        {/* Header */}
        <div className="flex items-center gap-2 mb-1">
          <span className="font-medium text-sm text-orange-200 flex items-center gap-1">
            <Sparkles size={12} className="text-orange-400 animate-pulse-soft" />
            Claude
          </span>
          
          {/* Tool indicator */}
          {toolName && (
            <span className="text-xs text-orange-300 bg-orange-900/30 px-2 py-0.5 rounded flex items-center gap-1">
              {toolIcon && <span className="animate-wiggle">{toolIcon}</span>}
              {toolName}
            </span>
          )}
          
          <span className="text-xs text-orange-400 bg-orange-900/20 px-2 py-0.5 rounded animate-pulse-soft">
            Working...
          </span>
          
          {timestamp && (
            <span className="text-xs text-orange-400/70">
              {formatDistanceToNow(timestamp, { addSuffix: true })}
            </span>
          )}
        </div>

        {/* Synthetic status message with typing effect */}
        <div className="flex items-center gap-2">
          <div className="flex gap-1">
            <span className="w-1 h-1 bg-orange-400 rounded-full animate-dot-bounce" />
            <span className="w-1 h-1 bg-orange-400 rounded-full animate-dot-bounce animation-delay-200" />
            <span className="w-1 h-1 bg-orange-400 rounded-full animate-dot-bounce animation-delay-400" />
          </div>
          <span className="text-sm text-orange-100 italic">
            {content}
          </span>
        </div>
      </div>
    </div>
  );
};

// Utility function to detect if a message is synthetic
export const isSyntheticMessage = (messageId: string, content: string): boolean => {
  // Check for synthetic message ID pattern (from bridge service)
  if (messageId.startsWith('status_') && messageId.includes('_')) {
    return true;
  }
  
  // Check for synthetic status message patterns
  const syntheticPatterns = [
    /^Searching the web for/i,
    /^Reading .+\.\.\./i,
    /^Editing .+\.\.\./i,
    /^Writing to .+\.\.\./i,
    /^Executing: /i,
    /^Running agent task:/i,
    /^Searching for files/i,
    /^Listing contents of/i,
    /^Fetching content from/i,
    /^Using .+\.\.\./i,
  ];
  
  return syntheticPatterns.some(pattern => pattern.test(content.trim()));
};

// Utility function to get animation delay class
const getAnimationDelay = (index: number = 0): string => {
  const delays = ['', 'animation-delay-100', 'animation-delay-200', 'animation-delay-300'];
  return delays[index % delays.length] || '';
};

export default SyntheticMessageLoader;