version: '3.8'

services:
  # MongoDB database with replica set
  mongodb:
    image: mongo:7
    container_name: baton-mongodb
    environment:
      - MONGO_INITDB_DATABASE=baton
    volumes:
      - mongodb_data:/data/db
      - mongodb_logs:/var/log/mongodb
      - ./mongodb/init-replica-set.js:/docker-entrypoint-initdb.d/init-replica-set.js:ro
      - ./mongodb/docker-entrypoint.sh:/usr/local/bin/docker-entrypoint.sh:ro
    entrypoint: ["/usr/local/bin/docker-entrypoint.sh"]
    networks:
      - baton-network
    ports:
      - "27017:27017"
    healthcheck:
      test: |
        mongosh --quiet --eval "
          try {
            var status = rs.status();
            if (status.ok == 1 && status.members.length > 0) {
              var primary = status.members.find(m => m.stateStr == 'PRIMARY');
              if (primary) {
                quit(0);
              } else {
                quit(1);
              }
            } else {
              quit(1);
            }
          } catch(e) {
            quit(1);
          }
        "
      interval: 10s
      timeout: 10s
      retries: 10
      start_period: 30s
    restart: unless-stopped

  # Backend service
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: baton-backend
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=mongodb://mongodb:27017/baton
      - CLIENT_URL=http://localhost:5173
      - MCP_SERVER_PORT=3002
    depends_on:
      mongodb:
        condition: service_healthy
    networks:
      - baton-network
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3001/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

  # MCP Server service
  mcp-server:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: baton-mcp-server
    ports:
      - "3002:3002"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=mongodb://mongodb:27017/baton
      - MCP_TRANSPORT_MODE=websocket
      - MCP_SERVER_PORT=3002
    depends_on:
      mongodb:
        condition: service_healthy
    networks:
      - baton-network
    command: ["dumb-init", "npm", "run", "mcp:websocket"]
    restart: unless-stopped

  # Frontend service
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: baton-frontend
    ports:
      - "5173:80"
    environment:
      - NGINX_HOST=localhost
      - NGINX_PORT=80
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - baton-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    restart: unless-stopped

  # Database setup service (runs once)
  db-setup:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: baton-db-setup
    environment:
      - DATABASE_URL=mongodb://mongodb:27017/baton
    networks:
      - baton-network
    command: ["dumb-init", "npx", "prisma", "db", "push"]
    depends_on:
      mongodb:
        condition: service_healthy
    restart: "no"

  # Optional: Database seeding service
  db-seed:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: baton-db-seed
    environment:
      - DATABASE_URL=mongodb://mongodb:27017/baton
    networks:
      - baton-network
    command: ["dumb-init", "npx", "prisma", "db", "seed"]
    depends_on:
      db-setup:
        condition: service_completed_successfully
    restart: "no"
    profiles:
      - seed

volumes:
  mongodb_data:
    driver: local
  mongodb_logs:
    driver: local

networks:
  baton-network:
    driver: bridge