version: '3.8'

services:
  # PostgreSQL database
  postgres:
    image: postgres:15-alpine
    container_name: baton-postgres
    environment:
      - POSTGRES_DB=baton
      - POSTGRES_USER=baton_user
      - POSTGRES_PASSWORD=baton_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - baton-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U baton_user -d baton"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped
    ports:
      - "5432:5432"

  # Backend service
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: baton-backend
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://baton_user:baton_password@postgres:5432/baton
      - CLIENT_URL=http://localhost:5173
      - MCP_SERVER_PORT=3002
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - baton-network
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3001/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

  # MCP Server service
  mcp-server:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: baton-mcp-server
    ports:
      - "3002:3002"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://baton_user:baton_password@postgres:5432/baton
      - MCP_TRANSPORT_MODE=websocket
      - MCP_SERVER_PORT=3002
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - baton-network
    command: ["dumb-init", "npm", "run", "mcp:websocket"]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3002/health", "||", "exit", "1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

  # Frontend service
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: baton-frontend
    ports:
      - "5173:80"
    environment:
      - NGINX_HOST=localhost
      - NGINX_PORT=80
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - baton-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    restart: unless-stopped

  # Database migration service (runs once)
  db-migrate:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: baton-db-migrate
    environment:
      - DATABASE_URL=postgresql://baton_user:baton_password@postgres:5432/baton
    networks:
      - baton-network
    command: ["dumb-init", "npx", "prisma", "migrate", "deploy"]
    depends_on:
      postgres:
        condition: service_healthy
    restart: "no"

  # Optional: Database seeding service
  db-seed:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: baton-db-seed
    environment:
      - DATABASE_URL=postgresql://baton_user:baton_password@postgres:5432/baton
    networks:
      - baton-network
    command: ["dumb-init", "npx", "prisma", "db", "seed"]
    depends_on:
      db-migrate:
        condition: service_completed_successfully
    restart: "no"
    profiles:
      - seed

volumes:
  postgres_data:
    driver: local

networks:
  baton-network:
    driver: bridge